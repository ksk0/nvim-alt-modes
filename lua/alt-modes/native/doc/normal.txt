
# ============================================================================
# 1. block all keymaps from mode
#    1.1 block "leading" keymaps
#    1.2 handle exceptions
#
# 3. block exit from mode
# 2. block entering to other modes (:help mode-switching)
#    
#    from: normal mode
#    -------------------------------------------------------
#    n -> ex        gQ
#
#    n -> cmdline   : / ? !
#
#    n -> replace   r
#                   R
#                   gR
#
#    n -> insert    i I
#                   a A
#                   o O
#                   c C
#                   s S
#
#    n -> visual    v V ^V
#
#    n -> select    mouse             (if "mouse" in "selectmode")
#                   v V ^V            (if "cmd"   in "selectmode")
#                   SHIFT-{movement}  (if "key"   in "selectmode")
#                   gh gH g^H         (always)
#
#
#    >>> from: insert mode
#    -------------------------------------------------------
#    i -> normal    <esc> CTRL-C CTRL-[
#                   CTRL-\ CTRL-N 
#                   CTRL-\ CTRL-G 
#                   ^O                 (one command only)
#
#    i -> replace   <insert>
#
#                   
#
#    >>> from: replace mode
#    -------------------------------------------------------
#    r -> normal    <esc>
#                   ^O                 (one command only)
#    r -> insert    <insert>
#
#
#    >>> from: visual mode
#    -------------------------------------------------------
#    v -> normal    <esc>
#                   v V ^V             (changes mode depending of current visual mode)
#                   non-movement cmd   (executes command and goes to normal mode, like "d" for delete)
#    
#    v -> cmdline   :
#    v -> select    ^G ^O
#    v -> insert    c C
#
#                   
#    >>> from: select mode
#    -------------------------------------------------------
#    s -> normal    non-printable movement without SHIFT ()
#    s -> insert    printable character 
#    s -> visual    ^G ^O
#                   
#
# ============================================================================
# 2. Normal mode
# ============================================================================
# CHAR         any non-blank character
# WORD         a sequence of non-blank characters
# N            a number entered before the command
# {motion}     a cursor movement command
# N-move       the text that is moved over with a {motion}
# SECTION      a section that possibly starts with '}' instead of '{'
#
# note: 1 = cursor movement command;
#       2 = can be undone/redone
#
# tag                      char                note action in Normal mode
#----------------------------------------------------------------------------
#                          CTRL-@                   not used
# CTRL-A                   CTRL-A                2  add N to number at/after cursor
# CTRL-B                   CTRL-B                1  scroll N screens Backwards
# CTRL-C                   CTRL-C                   interrupt current (search) command
# CTRL-D                   CTRL-D                   scroll Down N lines (default: half a screen)
# CTRL-E                   CTRL-E                   scroll N lines upwards (N lines Extra)
# CTRL-F                   CTRL-F                1  scroll N screens Forward
# CTRL-G                   CTRL-G                   display current file name and position
# <BS>                     <BS>                  1  same as "h"
# CTRL-H                   CTRL-H                1  same as "h"
# <Tab>                    <Tab>                 1  go to N newer entry in jump list
# CTRL-I                   CTRL-I                1  same as <Tab>
# <NL>                     <NL>                  1  same as "j"
# CTRL-J                   CTRL-J                1  same as "j"
#                          CTRL-K                   not used
# CTRL-L                   CTRL-L                   redraw screen
# <CR>                     <CR>                  1  cursor to the first CHAR N lines lower
# CTRL-M                   CTRL-M                1  same as <CR>
# CTRL-N                   CTRL-N                1  same as "j"
# CTRL-O                   CTRL-O                1  go to N older entry in jump list
# CTRL-P                   CTRL-P                1  same as "k"
#                          CTRL-Q                   not used, or used for terminal control flow
# CTRL-R                   CTRL-R                2  redo changes which were undone with 'u'
#                          CTRL-S                   not used, or used for terminal control flow
# CTRL-T                   CTRL-T                   jump to N older Tag in tag list
# CTRL-U                   CTRL-U                   scroll N lines Upwards (default: half a screen)
# CTRL-V                   CTRL-V                   start blockwise Visual mode
# CTRL-W                   CTRL-W {char}            window commands, see CTRL-W
# CTRL-X                   CTRL-X                2  subtract N from number at/after cursor
# CTRL-Y                   CTRL-Y                   scroll N lines downwards
# CTRL-Z                   CTRL-Z                   suspend program (or start new shell)
#                          CTRL-[ <Esc>             not used
# CTRL-\_CTRL-N            CTRL-\ CTRL-N            go to Normal mode (no-op)
# CTRL-\_CTRL-G            CTRL-\ CTRL-G            go to Normal mode (no-op)
#                          CTRL-\ a - z             reserved for extensions
#                          CTRL-\ others            not used
# CTRL-]                   CTRL-]                   :ta to ident under cursor
# CTRL-^                   CTRL-^                   edit Nth alternate file (equivalent to ":e #N")
# CTRL-<Tab>               CTRL-<Tab>               same as g<Tab> : go to last accessed tab page
#                          CTRL-_                   not used
# <Space>                  <Space>               1  same as "l"
# !                        !{motion}{filter}     2  filter N-move text through the {filter} command
# !!                       !!{filter}            2  filter N lines through the {filter} command
# quote                    "{register}              use {register} for next delete, yank or put ({.%#:} only work with put)
# #                        #                     1  search backward for the Nth occurrence of the ident under the cursor
# $                        $                     1  cursor to the end of Nth next line
# %                        %                     1  find the next (curly/square) bracket on
#                                                   this line and go to its match, or go to
#                                                   matching comment bracket, or go to matching
#                                                   preprocessor directive.
# N%                       {count}%              1  go to N percentage in the file
# &                        &                     2  repeat last :s
# '                        '{a-zA-Z0-9}          1  cursor to the first CHAR on the line with mark {a-zA-Z0-9}
# ''                       ''                    1  cursor to the first CHAR of the line where the cursor was before the latest jump.
# '(                       '(                    1  cursor to the first CHAR on the line of the start of the current sentence
# ')                       ')                    1  cursor to the first CHAR on the line of the end of the current sentence
# '<                       '<                    1  cursor to the first CHAR of the line where highlighted area starts/started in the current buffer.
# '>                       '>                    1  cursor to the first CHAR of the line where highlighted area ends/ended in the current buffer.
# '[                       '[                    1  cursor to the first CHAR on the line of the start of last operated text or start of put text
# ']                       ']                    1  cursor to the first CHAR on the line of the end of last operated text or end of put text
# '{                       '{                    1  cursor to the first CHAR on the line of the start of the current paragraph
# '}                       '}                    1  cursor to the first CHAR on the line of the end of the current paragraph
# (                        (                     1  cursor N sentences backward
# )                        )                     1  cursor N sentences forward
# star                     *                     1  search forward for the Nth occurrence of the ident under the cursor
# +                        +                     1  same as <CR>
# ,                        ,                     1  repeat latest f, t, F or T in opposite direction N times
# -                        -                     1  cursor to the first CHAR N lines higher
# .                        .                     2  repeat last change with count replaced with N
# /                        /{pattern}<CR>        1  search forward for the Nth occurrence of {pattern}
# /<CR>                    /<CR>                 1  search forward for {pattern} of last search
# 0                        0                     1  cursor to the first char of the line
# count                    1                        prepend to command to give a count
# count                    2                        "
# count                    3                        "
# count                    4                        "
# count                    5                        "
# count                    6                        "
# count                    7                        "
# count                    8                        "
# count                    9                        "
# :                        :                     1  start entering an Ex command
# N:                       {count}:                 start entering an Ex command with range from current line to N-1 lines down
# ;                        ;                     1  repeat latest f, t, F or T N times
# <                        <{motion}             2  shift N-move lines one 'shiftwidth' leftwards
# <<                       <<                    2  shift N lines one 'shiftwidth' leftwards
# =                        ={motion}             2  filter N-move lines through "indent"
# ==                       ==                    2  filter N lines through "indent"
# >                        >{motion}             2  shift N-move lines one 'shiftwidth' rightwards
# >>                       >>                    2  shift N lines one 'shiftwidth' rightwards
# ?                        ?{pattern}<CR>        1  search backward for the Nth previous occurrence of {pattern}
# ?<CR>                    ?<CR>                 1  search backward for {pattern} of last search
# @                        @{a-z}                2  execute the contents of register {a-z} N times
# @:                       @:                       repeat the previous ":" command N times
# @@                       @@                    2  repeat the previous @{a-z} N times
# A                        A                     2  append text after the end of the line N times
# B                        B                     1  cursor N WORDS backward
# C                        ["x]C                 2  change from the cursor position to the end of the line, and N-1 more lines [into register x]; synonym for "c$"
# D                        ["x]D                 2  delete the characters under the cursor until the end of the line and N-1 more lines [into register x]; synonym for "d$"
# E                        E                     1  cursor forward to the end of WORD N
# F                        F{char}               1  cursor to the Nth occurrence of {char} to the left
# G                        G                     1  cursor to line N, default last line
# H                        H                     1  cursor to line N from top of screen
# I                        I                     2  insert text before the first CHAR on the line N times
# J                        J                     2  Join N lines; default is 2
# K                        K                        lookup Keyword under the cursor with 'keywordprg'
# L                        L                     1  cursor to line N from bottom of screen
# M                        M                     1  cursor to middle line of screen
# N                        N                     1  repeat the latest '/' or '?' N times in opposite direction
# O                        O                     2  begin a new line above the cursor and insert text, repeat N times
# P                        ["x]P                 2  put the text [from register x] before the cursor N times
# R                        R                     2  enter replace mode: overtype existing characters, repeat the entered text N-1 times
# S                        ["x]S                 2  delete N lines [into register x] and start insert; synonym for "cc".
# T                        T{char}               1  cursor till after Nth occurrence of {char} to the left
# U                        U                     2  undo all latest changes on one line
# V                        V                        start linewise Visual mode
# W                        W                     1  cursor N WORDS forward
# X                        ["x]X                 2  delete N characters before the cursor [into register x]
# Y                        ["x]Y                    yank N lines [into register x]; synonym for "yy" Note: Mapped to "y$" by default. default-mappings
# ZZ                       ZZ                       write if buffer changed and close window
# ZQ                       ZQ                       close window without writing
# [                        [{char}                  square bracket command (see [ below)
#                          \                        not used
# ]                        ]{char}                  square bracket command (see ] below)
# ^                        ^                     1  cursor to the first CHAR of the line
# _                        _                     1  cursor to the first CHAR N - 1 lines lower
# `                        `{a-zA-Z0-9}          1  cursor to the mark {a-zA-Z0-9}
# `(                       `(                    1  cursor to the start of the current sentence
# `)                       `)                    1  cursor to the end of the current sentence
# `<                       `<                    1  cursor to the start of the highlighted area
# `>                       `>                    1  cursor to the end of the highlighted area
# `[                       `[                    1  cursor to the start of last operated text or start of putted text
# `]                       `]                    1  cursor to the end of last operated text or end of putted text
# ``                       ``                    1  cursor to the position before latest jump
# `{                       `{                    1  cursor to the start of the current paragraph
# `}                       `}                    1  cursor to the end of the current paragraph
# a                        a                     2  append text after the cursor N times
# b                        b                     1  cursor N words backward
# c                        ["x]c{motion}         2  delete N-move text [into register x] and start insert
# cc                       ["x]cc                2  delete N lines [into register x] and start insert
# d                        ["x]d{motion}         2  delete N-move text [into register x]
# dd                       ["x]dd                2  delete N lines [into register x]
# do                       do                    2  same as ":diffget"
# dp                       dp                    2  same as ":diffput"
# e                        e                     1  cursor forward to the end of word N
# f                        f{char}               1  cursor to Nth occurrence of {char} to the right
# g                        g{char}                  extended commands, see g below
# h                        h                     1  cursor N chars to the left
# i                        i                     2  insert text before the cursor N times
# j                        j                     1  cursor N lines downward
# k                        k                     1  cursor N lines upward
# l                        l                     1  cursor N chars to the right
# m                        m{A-Za-z}                set mark {A-Za-z} at cursor position
# n                        n                     1  repeat the latest '/' or '?' N times
# o                        o                     2  begin a new line below the cursor and insert text, repeat N times
# p                        ["x]p                 2  put the text [from register x] after the cursor N times
# q                        q{0-9a-zA-Z"}            record typed characters into named register {0-9a-zA-Z"} (uppercase to append)
# q                        q                        (while recording) stops recording
# Q                        Q                        replay last recorded macro
# q:                       q:                       edit : command-line in command-line window
# q/                       q/                       edit / command-line in command-line window
# q?                       q?                       edit ? command-line in command-line window
# r                        r{char}               2  replace N chars with {char}
# s                        ["x]s                 2  (substitute) delete N characters [into register x] and start insert
# t                        t{char}               1  cursor till before Nth occurrence of {char} to the right
# u                        u                     2  undo changes
# v                        v                        start charwise Visual mode
# w                        w                     1  cursor N words forward
# x                        ["x]x                 2  delete N characters under and after the cursor [into register x]
# y                        ["x]y{motion}            yank N-move text [into register x]
# yy                       ["x]yy                   yank N lines [into register x]
# z                        z{char}                  commands starting with 'z', see z below
# {                        {                     1  cursor N paragraphs backward
# bar                      |                     1  cursor to column N
# }                        }                     1  cursor N paragraphs forward
# |~|                      ~                     2  'tildeop' off: switch case of N characters under cursor and move the cursor N characters to the right
# |~|                      ~{motion}                'tildeop' on: switch case of N-move text
# <CTRL-End>               <CTRL-End>            1  same as "G"
# <CTRL-Home>              <CTRL-Home>           1  same as "gg"
# <CTRL-Left>              <CTRL-Left>           1  same as "b"
# <CTRL-LeftMouse>         <CTRL-LeftMouse>         :ta to the keyword at the mouse click
# <CTRL-Right>             <CTRL-Right>          1  same as "w"
# <CTRL-RightMouse>        <CTRL-RightMouse>        same as "CTRL-T"
# <CTRL-Tab>               <CTRL-Tab>               same as "g<Tab>"
# <Del>                    ["x]<Del>             2  same as "x"
# N<Del>                   {count}<Del>             remove the last digit from {count}
# <Down>                   <Down>                1  same as "j"
# <End>                    <End>                 1  same as "$"
# <F1>                     <F1>                     same as <Help>
# <Help>                   <Help>                   open a help window
# <Home>                   <Home>                1  same as "0"
# <Insert>                 <Insert>              2  same as "i"
# <Left>                   <Left>                1  same as "h"
# <LeftMouse>              <LeftMouse>           1  move cursor to the mouse click position
# <MiddleMouse>            <MiddleMouse>         2  same as "gP" at the mouse click position
# <PageDown>               <PageDown>               same as CTRL-F
# <PageUp>                 <PageUp>                 same as CTRL-B
# <Right>                  <Right>               1  same as "l"
# <RightMouse>             <RightMouse>             start Visual mode, move cursor to the mouse click position
# <S-Down>                 <S-Down>              1  same as CTRL-F
# <S-Left>                 <S-Left>              1  same as "b"
# <S-LeftMouse>            <S-LeftMouse>            same as "*" at the mouse click position
# <S-Right>                <S-Right>             1  same as "w"
# <S-RightMouse>           <S-RightMouse>           same as "#" at the mouse click position
# <S-Up>                   <S-Up>                1  same as CTRL-B
# <Undo>                   <Undo>                2  same as "u"
# <Up>                     <Up>                  1  same as "k"
#
# <ScrollWheelDown>        "<ScrollWheelDown>        move window three" lines down
# <S-ScrollWheelDown>      <S-ScrollWheelDown>      move window one page down
# <ScrollWheelUp>          <ScrollWheelUp>          move window three lines up
# <S-ScrollWheelUp>        <S-ScrollWheelUp>        move window one page up
# <ScrollWheelLeft>        <ScrollWheelLeft>        move window six columns left
# <S-ScrollWheelLeft>      <S-ScrollWheelLeft>      move window one page left
# <ScrollWheelRight>       <ScrollWheelRight>       move window six columns right
# <S-ScrollWheelRight>     <S-ScrollWheelRight>     move window one page right
#
#
# ============================================================================
# 2.2 Window commands
# ============================================================================
#
# tag                      command                  action in Normal mode
# ----------------------------------------------------------------------------
# CTRL-W_CTRL-B            CTRL-W CTRL-B            same as "CTRL-W b"
# CTRL-W_CTRL-C            CTRL-W CTRL-C            same as "CTRL-W c"
# CTRL-W_CTRL-D            CTRL-W CTRL-D            same as "CTRL-W d"
# CTRL-W_CTRL-F            CTRL-W CTRL-F            same as "CTRL-W f"
#                          CTRL-W CTRL-G            same as "CTRL-W g .."
# CTRL-W_CTRL-H            CTRL-W CTRL-H            same as "CTRL-W h"
# CTRL-W_CTRL-I            CTRL-W CTRL-I            same as "CTRL-W i"
# CTRL-W_CTRL-J            CTRL-W CTRL-J            same as "CTRL-W j"
# CTRL-W_CTRL-K            CTRL-W CTRL-K            same as "CTRL-W k"
# CTRL-W_CTRL-L            CTRL-W CTRL-L            same as "CTRL-W l"
# CTRL-W_CTRL-N            CTRL-W CTRL-N            same as "CTRL-W n"
# CTRL-W_CTRL-O            CTRL-W CTRL-O            same as "CTRL-W o"
# CTRL-W_CTRL-P            CTRL-W CTRL-P            same as "CTRL-W p"
# CTRL-W_CTRL-Q            CTRL-W CTRL-Q            same as "CTRL-W q"
# CTRL-W_CTRL-R            CTRL-W CTRL-R            same as "CTRL-W r"
# CTRL-W_CTRL-S            CTRL-W CTRL-S            same as "CTRL-W s"
# CTRL-W_CTRL-T            CTRL-W CTRL-T            same as "CTRL-W t"
# CTRL-W_CTRL-V            CTRL-W CTRL-V            same as "CTRL-W v"
# CTRL-W_CTRL-W            CTRL-W CTRL-W            same as "CTRL-W w"
# CTRL-W_CTRL-X            CTRL-W CTRL-X            same as "CTRL-W x"
# CTRL-W_CTRL-Z            CTRL-W CTRL-Z            same as "CTRL-W z"
# CTRL-W_CTRL-]            CTRL-W CTRL-]            same as "CTRL-W ]"
# CTRL-W_CTRL-^            CTRL-W CTRL-^            same as "CTRL-W ^"
# CTRL-W_CTRL-_            CTRL-W CTRL-_            same as "CTRL-W _"
# CTRL-W_+                 CTRL-W +                 increase current window height N lines
# CTRL-W_-                 CTRL-W -                 decrease current window height N lines
# CTRL-W_<                 CTRL-W <                 decrease current window width N columns
# CTRL-W_=                 CTRL-W =                 make all windows the same height & width
# CTRL-W_>                 CTRL-W >                 increase current window width N columns
# CTRL-W_H                 CTRL-W H                 move current window to the far left
# CTRL-W_J                 CTRL-W J                 move current window to the very bottom
# CTRL-W_K                 CTRL-W K                 move current window to the very top
# CTRL-W_L                 CTRL-W L                 move current window to the far right
# CTRL-W_P                 CTRL-W P                 go to preview window
# CTRL-W_R                 CTRL-W R                 rotate windows upwards N times
# CTRL-W_S                 CTRL-W S                 same as "CTRL-W s"
# CTRL-W_T                 CTRL-W T                 move current window to a new tab page
# CTRL-W_W                 CTRL-W W                 go to N previous window (wrap around)
# CTRL-W_]                 CTRL-W ]                 split window and jump to tag under cursor
# CTRL-W_^                 CTRL-W ^                 split current window and edit alternate file N
# CTRL-W__                 CTRL-W _                 set current window height to N (default: very high)
# CTRL-W_b                 CTRL-W b                 go to bottom window
# CTRL-W_c                 CTRL-W c                 close current window (like :close)
# CTRL-W_d                 CTRL-W d                 split window and jump to definition under the cursor
# CTRL-W_f                 CTRL-W f                 split window and edit file name under the cursor
# CTRL-W_F                 CTRL-W F                 split window and edit file name under the cursor and jump to the line number following the file name.
# CTRL-W_g_CTRL-]          CTRL-W g CTRL-]          split window and do :tjump to tag under cursor
# CTRL-W_g]                CTRL-W g ]               split window and do :tselect for tag under cursor
# CTRL-W_g}                CTRL-W g }               do a :ptjump to the tag under the cursor
# CTRL-W_gf                CTRL-W g f               edit file name under the cursor in a new tab page
# CTRL-W_gF                CTRL-W g F               edit file name under the cursor in a new tab page and jump to the line number following the file name.
# CTRL-W_gt                CTRL-W g t               same as gt: go to next tab page
# CTRL-W_gT                CTRL-W g T               same as gT: go to previous tab page
# CTRL-W_g<Tab>            CTRL-W g <Tab>           same as g<Tab>: go to last accessed tab page
# CTRL-W_h                 CTRL-W h                 Go to Nth left window (stop at first window)
# CTRL-W_i                 CTRL-W i                 Split window and jump to declaration of identifier under the cursor
# CTRL-W_j                 CTRL-W j                 Go N windows down (stop at last window)
# CTRL-W_k                 CTRL-W k                 Go N windows up (stop at first window)
# CTRL-W_l                 CTRL-W l                 Go to Nth right window (stop at last window)
# CTRL-W_n                 CTRL-W n                 Open new window, N lines high
# CTRL-W_o                 CTRL-W o                 Close all but current window (like :only)
# CTRL-W_p                 CTRL-W p                 Go to previous (last accessed) window
# CTRL-W_q                 CTRL-W q                 Quit current window (like :quit)
# CTRL-W_r                 CTRL-W r                 Rotate windows downwards N times
# CTRL-W_s                 CTRL-W s                 Split current window in two parts, new window N lines high
# CTRL-W_t                 CTRL-W t                 Go to top window
# CTRL-W_v                 CTRL-W v                 Split current window vertically, new window N columns wide
# CTRL-W_w                 CTRL-W w                 Go to N next window (wrap around)
# CTRL-W_x                 CTRL-W x                 Exchange current window with window N (default: next window)
# CTRL-W_z                 CTRL-W z                 Close preview window
# CTRL-W_bar               CTRL-W |                 Set window width to N columns
# CTRL-W_}                 CTRL-W }                 Show tag under cursor in preview window
# CTRL-W_<Down>            CTRL-W <Down>            same as "CTRL-W j"
# CTRL-W_<Up>              CTRL-W <Up>              same as "CTRL-W k"
# CTRL-W_<Left>            CTRL-W <Left>            same as "CTRL-W h"
# CTRL-W_<Right>           CTRL-W <Right>           same as "CTRL-W l"
#
#
# ============================================================================
# 2.3 Square bracket commands
# ============================================================================
#
# tag                      char                note action in Normal mode
# ----------------------------------------------------------------------------
# [_CTRL-D                 [ CTRL-D              -  jump to first #define found in current and
#                                                   included files matching the word under the
#                                                   cursor, start searching at beginning of
#                                                   current file
# [_CTRL-I                 [ CTRL-I              -  jump to first line in current and included
#                                                   files that contains the word under the
#                                                   cursor, start searching at beginning of
#                                                   current file
# [#                       [#                    1  cursor to N previous unmatched #if, #else or #ifdef
# ['                       ['                    1  cursor to previous lowercase mark, on first non-blank
# [(                       [(                    1  cursor N times back to unmatched '('
# [star                    [*                    1  same as "[/"
# [`                       [`                    1  cursor to previous lowercase mark
# [/                       [/                    1  cursor to N previous start of a C comment
# [D                       [D                    -  list all defines found in current and
#                                                   included files matching the word under the
#                                                   cursor, start searching at beginning of
#                                                   current file
# [I                       [I                    -  list all lines found in current and
#                                                   included files that contain the word under
#                                                   the cursor, start searching at beginning of
#                                                   current file
# [P                       [P                    2  same as "[p"
# [[                       [[                    1  cursor N sections backward
# []                       []                    1  cursor N SECTIONS backward
# [c                       [c                    1  cursor N times backwards to start of change
# [d                       [d                    -  show first #define found in current and
#                                                   included files matching the word under the
#                                                   cursor, start searching at beginning of
#                                                   current file
# [f                       [f                    -  same as "gf"
# [i                       [i                    -  show first line found in current and
#                                                   included files that contains the word under
#                                                   the cursor, start searching at beginning of
#                                                   current file
# [m                       [m                    1  cursor N times back to start of member function
# [p                       [p                    2  like "P", but adjust indent to current line
# [s                       [s                    1  move to the previous misspelled word
# [z                       [z                    1  move to start of open fold
# [{                       [{                    1  cursor N times back to unmatched '{'
# [<MiddleMouse>           [<MiddleMouse>        2  same as "[p"
# ]_CTRL-D                 ] CTRL-D              -  jump to first #define found in current and
#                                                   included files matching the word under the
#                                                   cursor, start searching at cursor position
# ]_CTRL-I                 ] CTRL-I              -  jump to first line in current and included
#                                                   files that contains the word under the
#                                                   cursor, start searching at cursor position
# ]#                       ]#                    1  cursor to N next unmatched #endif or #else
# ]'                       ]'                    1  cursor to next lowercase mark, on first non-blank
# ])                       ])                    1  cursor N times forward to unmatched ')'
# ]star                    ]*                    1  same as "]/"
# ]`                       ]`                    1  cursor to next lowercase mark
# ]/                       ]/                    1  cursor to N next end of a C comment
# ]D                       ]D                    -  list all #defines found in current and
#                                                   included files matching the word under the
#                                                   cursor, start searching at cursor position
# ]I                       ]I                    -  list all lines found in current and
#                                                   included files that contain the word under
#                                                   the cursor, start searching at cursor
#                                                   position
# ]P                       ]P                    2  same as "[p"
# ][                       ][                    1  cursor N SECTIONS forward
# ]]                       ]]                    1  cursor N sections forward
# ]c                       ]c                    1  cursor N times forward to start of change
# ]d                       ]d                    -  show first #define found in current and
#                                                   included files matching the word under the
#                                                   cursor, start searching at cursor position
# ]f                       ]f                    -  same as "gf"
# ]i                       ]i                    -  show first line found in current and
#                                                   included files that contains the word under
#                                                   the cursor, start searching at cursor
#                                                   position
# ]m                       ]m                    1  cursor N times forward to end of member function
# ]p                       ]p                    2  like "p", but adjust indent to current line
# ]s                       ]s                    1  move to next misspelled word
# ]z                       ]z                    1  move to end of open fold
# ]}                       ]}                    1  cursor N times forward to unmatched '}'
# ]<MiddleMouse>           ]<MiddleMouse>        2  same as "]p"
#
#
# ============================================================================
# 2.4 Commands starting with 'g'
# ============================================================================
#
# tag                      char                note action in Normal mode
# ----------------------------------------------------------------------------
# g_CTRL-A                 g CTRL-A              -  dump a memory profile
# g_CTRL-G                 g CTRL-G              -  show information about current cursor position
# g_CTRL-H                 g CTRL-H              -  start Select block mode
# g_CTRL-]                 g CTRL-]              -  :tjump to the tag under the cursor
# g#                       g#                    1  like "#", but without using "\<" and "\>"
# g$                       g$                    1  when 'wrap' off go to rightmost character of
#                                                   the current line that is on the screen;
#                                                   when 'wrap' on go to the rightmost character
#                                                   of the current screen line
# g&                       g&                    2  repeat last ":s" on all lines
# g'                       g'{mark}              1  like |'| but without changing the jumplist
# g`                       g`{mark}              1  like ` but without changing the jumplist
# gstar                    g*                    1  like "*", but without using "\<" and "\>"
# g+                       g+                    -  go to newer text state N times
# g,                       g,                    1  go to N newer position in change list
# g-                       g-                    -  go to older text state N times
# g0                       g0                    1  when 'wrap' off go to leftmost character of
#                                                   the current line that is on the screen;
#                                                   when 'wrap' on go to the leftmost character
#                                                   of the current screen line
# g8                       g8                    -  print hex value of bytes used in UTF-8 character under the cursor
# g;                       g;                    1  go to N older position in change list
# g<                       g<                    -  display previous command output
# g?                       g?                    2  Rot13 encoding operator
# g?g?                     g??                   2  Rot13 encode current line
# g?g?                     g?g?                  2  Rot13 encode current line
# gD                       gD                    1  go to definition of word under the cursor in current file
# gE                       gE                    1  go backwards to the end of the previous WORD
# gH                       gH                    -  start Select line mode
# gI                       gI                    2  like "I", but always start in column 1
# gJ                       gJ                    2  join lines without inserting space
# gN                       gN                  1,2  find the previous match with the last used search pattern and Visually select it
# gP                       ["x]gP                2  put the text [from register x] before the cursor N times, leave the cursor after it
# gQ                       gQ                    -  switch to "Ex" mode with Vim editing
# gR                       gR                    2  enter Virtual Replace mode
# gT                       gT                    -  go to the previous tab page
# gU                       gU{motion}            2  make N-move text uppercase
# gV                       gV                    -  don't reselect the previous Visual area when executing a mapping or menu in Select mode
# g]                       g]                    -  :tselect on the tag under the cursor
# g^                       g^                    1  when 'wrap' off go to leftmost non-white
#                                                   character of the current line that is on
#                                                   the screen; when 'wrap' on go to the
#                                                   leftmost non-white character of the current
#                                                   screen line
# g_                       g_                    1  cursor to the last CHAR N - 1 lines lower
# ga                       ga                       print ascii value of character under the cursor
# gd                       gd                    1  go to definition of word under the cursor in current function
# ge                       ge                    1  go backwards to the end of the previous word
# gf                       gf                    -  start editing the file whose name is under the cursor
# gF                       gF                    -  start editing the file whose name is under
#                                                   the cursor and jump to the line number
#                                                   following the filename.
# gg                       gg                    1  cursor to line N, default first line
# gh                       gh                    -  start Select mode
# gi                       gi                    2  like "i", but first move to the '^ mark
# gj                       gj                    1  like "j", but when 'wrap' on go N screen lines down
# gk                       gk                    1  like "k", but when 'wrap' on go N screen lines up
# gm                       gm                    1  go to character at middle of the screenline
# gM                       gM                    1  go to character at middle of the text line
# gn                       gn                  1,2  find the next match with the last used
#                                                   search pattern and Visually select it
# go                       go                    1  cursor to byte N in the buffer
# gp                       ["x]gp                2  put the text [from register x] after the cursor N times, leave the cursor after it
# gq                       gq{motion}            2  format N-move text
# gr                       gr{char}              2  virtual replace N chars with {char}
# gs                       gs                    -  go to sleep for N seconds (default 1)
# gt                       gt                    -  go to the next tab page
# gu                       gu{motion}            2  make N-move text lowercase
# gv                       gv                    -  reselect the previous Visual area
# gw                       gw{motion}            2  format N-move text and keep cursor
# netrw-gx                 gx                    -  execute application for file name under the cursor (only with netrw plugin)
# g@                       g@{motion}            -  call 'operatorfunc'
# g~                       g~{motion}            2  swap case for N-move text
# g<Down>                  g<Down>               1  same as "gj"
# g<End>                   g<End>                1  same as "g$"
# g<Home>                  g<Home>               1  same as "g0"
# g<LeftMouse>             g<LeftMouse>          -  same as <CTRL-LeftMouse>
#                          g<MiddleMouse>        -  same as <CTRL-MiddleMouse>
# g<RightMouse>            g<RightMouse>         -  same as <CTRL-RightMouse>
# g<Tab>                   g<Tab>                -  go to last accessed tab page
# g<Up>                    g<Up>                 1  same as "gk"
#
#
# ============================================================================
# 2.5 Commands starting with 'z'
# ============================================================================
#
# tag                      char                note action in Normal mode
# ----------------------------------------------------------------------------
# z<CR>                    z<CR>                    redraw, cursor line to top of window, cursor on first non-blank
# zN<CR>                   z{height}<CR>            redraw, make window {height} lines high
# z+                       z+                       cursor on line N (default line below window), otherwise like "z<CR>"
# z-                       z-                       redraw, cursor line at bottom of window, cursor on first non-blank
# z.                       z.                       redraw, cursor line to center of window, cursor on first non-blank
# z=                       z=                       give spelling suggestions
# zA                       zA                       open a closed fold or close an open fold recursively
# zC                       zC                       close folds recursively
# zD                       zD                       delete folds recursively
# zE                       zE                       eliminate all folds
# zF                       zF                       create a fold for N lines
# zG                       zG                       temporarily mark word as correctly spelled
# zH                       zH                       when 'wrap' off scroll half a screenwidth to the right
# zL                       zL                       when 'wrap' off scroll half a screenwidth to the left
# zM                       zM                       set 'foldlevel' to zero
# zN                       zN                       set 'foldenable'
# zO                       zO                       open folds recursively
# zR                       zR                       set 'foldlevel' to the deepest fold
# zW                       zW                       temporarily mark word as incorrectly spelled
# zX                       zX                       re-apply 'foldlevel'
# z^                       z^                       cursor on line N (default line above window), otherwise like "z-"
# za                       za                       open a closed fold, close an open fold
# zb                       zb                       redraw, cursor line at bottom of window
# zc                       zc                       close a fold
# zd                       zd                       delete a fold
# ze                       ze                       when 'wrap' off scroll horizontally to
#                                                   position the cursor at the end (right side)
#                                                   of the screen
# zf                       zf{motion}               create a fold for N-move text
# zg                       zg                       permanently mark word as correctly spelled
# zh                       zh                       when 'wrap' off scroll screen N characters to the right
# zi                       zi                       toggle 'foldenable'
# zj                       zj                    1  move to the start of the next fold
# zk                       zk                    1  move to the end of the previous fold
# zl                       zl                       when 'wrap' off scroll screen N characters to the left
# zm                       zm                       subtract one from 'foldlevel'
# zn                       zn                       reset 'foldenable'
# zo                       zo                       open fold
# zp                       zp                       paste in block-mode without trailing spaces
# zP                       zP                       paste in block-mode without trailing spaces
# zr                       zr                       add one to 'foldlevel'
# zs                       zs                       when 'wrap' off scroll horizontally to
#                                                   position the cursor at the start (left
#                                                   side) of the screen
# zt                       zt                       redraw, cursor line at top of window
# zuw                      zuw                      undo zw
# zug                      zug                      undo zg
# zuW                      zuW                      undo zW
# zuG                      zuG                      undo zG
# zv                       zv                       open enough folds to view the cursor line
# zw                       zw                       permanently mark word as incorrectly spelled
# zx                       zx                       re-apply 'foldlevel' and do "zv"
# zy                       zy                       yank without trailing spaces
# zz                       zz                       redraw, cursor line at center of window
# z<Left>                  z<Left>                  same as "zh"
# z<Right>                 z<Right>                 same as "zl"
#
#
# ============================================================================
# 2.6 Operator-pending mode
# ============================================================================
#
# These can be used after an operator, but before a {motion} has been entered.
#
# tag                      char                     action in Operator-pending mode
# ---------------------------------------------------------------------------
# o_v                      v                        force operator to work charwise
# o_V                      V                        force operator to work linewise
# o_CTRL-V                 CTRL-V                   force operator to work blockwiseV
#
#

